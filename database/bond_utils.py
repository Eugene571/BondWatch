# database.bond_utils.py
from datetime import datetime, timedelta
from bot.notifications import get_bond_coupons_tinkoff
from database.moex_lookup import get_bond_coupons_from_moex


async def update_bond_coupon_info(bond, session, logger=print):
    today = datetime.utcnow()
    from_date = today
    to_date = today + timedelta(days=30)

    logger(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ Tinkoff —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: ")
    logger(f"from_date: {from_date}, to_date: {to_date}, instrumentId: {bond.figi}")

    events = []
    try:
        events = await get_bond_coupons_tinkoff(bond.figi, from_date, to_date)
        logger(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å Tinkoff: {events}")
    except Exception as e:
        logger(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫—É–ø–æ–Ω–æ–≤ —á–µ—Ä–µ–∑ Tinkoff: {e}")

    if not events:
        try:
            events = await get_bond_coupons_from_moex(bond.isin)
            logger(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å MOEX: {events}")
        except Exception as e:
            logger(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫—É–ø–æ–Ω–æ–≤ —á–µ—Ä–µ–∑ MOEX: {e}")

    if not events:
        logger("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫—É–ø–æ–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è. –î–∞–Ω–Ω—ã–µ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
        return  # –ù–µ —Ç—Ä–æ–≥–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è

    updated = False
    for event in events:
        event_date_str = event.get("couponDate") or event.get("COUPONDATE")
        event_amount_units = event.get("payOneBond", {}).get("units")
        event_amount_nano = event.get("payOneBond", {}).get("nano")

        logger(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫—É–ø–æ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event}")
        logger(f"–î–∞—Ç–∞ –∫—É–ø–æ–Ω–∞: {event_date_str}, –°—É–º–º–∞ (units): {event_amount_units}, –°—É–º–º–∞ (nano): {event_amount_nano}")

        if event_date_str and event_amount_units is not None and event_amount_nano is not None:
            try:
                event_date = datetime.fromisoformat(event_date_str.replace("Z", ""))
                logger(f"‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –∫—É–ø–æ–Ω–∞: {event_date}")

                event_amount = int(event_amount_units) + int(event_amount_nano) / 1e9
                logger(f"‚úÖ –ü–æ–ª–Ω–∞—è —Å—É–º–º–∞ –∫—É–ø–æ–Ω–∞: {event_amount}")

                if event_date.date() > today.date():
                    bond.next_coupon_date = event_date.date()
                    bond.next_coupon_value = event_amount
                    session.commit()
                    logger(f"üìå –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –∫—É–ø–æ–Ω–µ: –¥–∞—Ç–∞ = {event_date.date()}, —Å—É–º–º–∞ = {event_amount}")
                    updated = True
                    break
                else:
                    logger(f"‚ö†Ô∏è –ö—É–ø–æ–Ω –≤ –ø—Ä–æ—à–ª–æ–º: –¥–∞—Ç–∞ = {event_date.date()}")
            except Exception as e:
                logger(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫—É–ø–æ–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è: {e}")
        else:
            logger(f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –∫—É–ø–æ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã: {event_date_str}, {event_amount_units}, {event_amount_nano}")

    if not updated:
        logger("‚ö†Ô∏è –í—Å–µ –∫—É–ø–æ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –ø—Ä–æ—à–ª–æ–º –∏–ª–∏ –±—ã–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã. –î–∞–Ω–Ω—ã–µ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")