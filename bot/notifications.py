# bot/notifications.py
import os
import httpx
import logging
from datetime import date, timedelta
from telegram import Bot
from bot.DB import get_session, User
import datetime
from dotenv import load_dotenv

from database.moex_lookup import get_bond_coupons_from_moex

load_dotenv()
API_TOKEN = os.getenv("T_TOKEN")
BASE_URL_TINKOFF = "https://invest-public-api.tinkoff.ru/rest/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetBondCoupons"


async def get_bond_coupons_tinkoff(figi: str, from_date: datetime, to_date: datetime):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É–ø–æ–Ω–∞—Ö –æ–±–ª–∏–≥–∞—Ü–∏–∏ —Å API Tinkoff Invest."""
    headers = {
        "Authorization": f"Bearer {API_TOKEN}"
    }

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç—ã datetime –≤ —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601 —Å –≤—Ä–µ–º–µ–Ω–µ–º
    params = {
        "instrumentId": figi,
        "from": from_date.isoformat(),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫—É
        "to": to_date.isoformat()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫—É
    }

    try:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        logging.info(f"üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Tinkoff API —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}")

        async with httpx.AsyncClient() as client:
            response = await client.post(BASE_URL_TINKOFF, headers=headers, json=params)
            response.raise_for_status()
            data = response.json()

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            logging.info(f"üìÑ –û—Ç–≤–µ—Ç –æ—Ç Tinkoff API: {data}")

            return data.get("events", [])
    except httpx.RequestError as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API T-Invest: {e}")
        return []


async def check_and_notify(bot: Bot):
    logging.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞...")
    today = date.today()
    notify_date = today + timedelta(days=3)

    session = get_session()
    users = session.query(User).all()

    for user in users:
        for bond in user.tracked_bonds:
            from_date = today.isoformat()
            to_date = (today + timedelta(days=4)).isoformat()

            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫—É–ø–æ–Ω—ã –æ—Ç Tinkoff
            events = await get_bond_coupons_tinkoff(bond.figi, from_date, to_date)

            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –Ω–∏—á–µ–≥–æ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º MOEX –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –ø–ª–∞–Ω
            if not events:
                logging.info(f"üîÅ –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ T-Invest –¥–ª—è {bond.figi}, –ø—Ä–æ–±—É–µ–º –ú–û–ï–ö–°.")
                events = await get_bond_coupons_from_moex(bond.isin)

            for event in events:
                # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∏–∑ –¥–≤—É—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                event_date = event.get("couponDate") or event.get("COUPONDATE")
                event_amount_units = event.get("payOneBond", {}).get("units")
                event_amount_nano = event.get("payOneBond", {}).get("nano")

                if event_date and event_amount_units is not None and event_amount_nano is not None:
                    event_date = date.fromisoformat(event_date.split("T")[0])

                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é —Å—É–º–º—É –∫—É–ø–æ–Ω–∞ (–≤ —Ä—É–±–ª—è—Ö) —Å —É—á–µ—Ç–æ–º units –∏ nano
                    event_amount = int(event_amount_units) + int(event_amount_nano) / 1e9  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ä—É–±–ª–∏

                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫—É–ø–æ–Ω–∞ –≤ –ë–î
                    if event_date > today:  # –¢–æ–ª—å–∫–æ –¥–ª—è –±—É–¥—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
                        bond.next_coupon_date = event_date
                        bond.next_coupon_value = event_amount
                        session.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
                        logging.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –æ–±–ª–∏–≥–∞—Ü–∏–∏ {bond.isin}: "
                                     f"next_coupon_date = {event_date}, next_coupon_value = {event_amount}")
                    elif event_date == notify_date:
                        text = (
                            f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ 3 –¥–Ω—è ({event_date}) —É –±—É–º–∞–≥–∏ {bond.isin} ‚Äî —Å–æ–±—ã—Ç–∏–µ: {event_type.upper()}.\n"
                            f"–°—É–º–º–∞ –∫—É–ø–æ–Ω–∞: {event_amount} —Ä—É–±."
                        )
                        try:
                            await bot.send_message(chat_id=user.tg_id, text=text)
                            logging.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user.full_name} ‚Äî {bond.isin}")
                        except Exception as e:
                            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")