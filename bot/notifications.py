import httpx
import logging
from datetime import date, timedelta
from telegram import Bot
from bot.database import get_session, User
from database.figi_lookup import get_figi_by_ticker_and_classcode

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è API
API_TOKEN = "t.yOBlCXQ3CL8QnMkpwSZZbLML7tbxqyucssGMrpv8i5nB4sgG36JlqRCfy456xOw3BjvWdfTCHIC7t5mcjuZL4Q"  # –¢–æ–∫–µ–Ω –¥–ª—è API T-Invest
BASE_URL = "https://invest-public-api.tinkoff.ru/rest/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetBondCoupons"


async def get_bond_coupons(figi: str, from_date: str, to_date: str):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É–ø–æ–Ω–∞—Ö –æ–±–ª–∏–≥–∞—Ü–∏–∏ —Å API T-Invest."""
    headers = {
        "Authorization": f"Bearer {API_TOKEN}"
    }
    params = {
        "instrumentId": figi,  # –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±–ª–∏–≥–∞—Ü–∏–∏
        "from": from_date,  # –Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞
        "to": to_date  # –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞
    }

    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(BASE_URL, headers=headers, json=params)
            response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            data = response.json()
            return data.get("events", [])  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π (–∫—É–ø–æ–Ω–æ–≤)
    except httpx.RequestError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API T-Invest: {e}")
        return []


# –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def check_and_notify(bot: Bot):
    logging.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞...")
    today = date.today()
    notify_date = today + timedelta(days=3)  # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 3 –¥–Ω—è

    session = get_session()
    users = session.query(User).all()

    for user in users:
        for bond in user.tracked_bonds:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫—É–ø–æ–Ω—ã) –¥–ª—è –æ–±–ª–∏–≥–∞—Ü–∏–∏
            from_date = today.isoformat()  # —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞
            to_date = (today + timedelta(days=4)).isoformat()  # —á–µ—Ä–µ–∑ 3 –¥–Ω—è
            events = await get_bond_coupons(bond.figi, from_date, to_date)

            for event in events:
                event_date = event.get("couponDate")
                event_type = event.get("couponType")
                event_amount = event.get("payOneBond", {}).get("value", 0)

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞—Ç–æ–π –≤ –æ–±—ä–µ–∫—Ç date
                event_date = date.fromisoformat(event_date.split("T")[0])

                if event_date == notify_date:
                    text = f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ 3 –¥–Ω—è ({event_date}) —É –±—É–º–∞–≥–∏ {bond.isin} ‚Äî —Å–æ–±—ã—Ç–∏–µ: {event_type.upper()}.\n–°—É–º–º–∞ –∫—É–ø–æ–Ω–∞: {event_amount}."
                    try:
                        await bot.send_message(chat_id=user.tg_id, text=text)
                        logging.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user.full_name} ‚Äî {bond.isin}")
                    except Exception as e:
                        logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")
