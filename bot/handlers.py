# bot.handlers.py
from telegram import Update
from telegram.ext import CommandHandler, Application, ContextTypes, filters, MessageHandler, ConversationHandler
from bot.database import get_session, User
import re
from bot.database import TrackedBond
from database.figi_lookup import get_figi_by_ticker_and_classcode
from sqlalchemy.orm import selectinload
from database.moex_name_lookup import get_bond_name_from_moex
import logging
import io
import sys
sys.stdout = io.TextIOWrapper(sys.stdout.detach(), encoding='utf-8')
sys.stderr = io.TextIOWrapper(sys.stderr.detach(), encoding='utf-8')

ISIN_PATTERN = re.compile(r'^[A-Z]{2}[A-Z0-9]{10}$')  # –ü—Ä–∏–º–µ—Ä: RU000A105TJ2
AWAITING_ISIN_TO_REMOVE = 1
AWAITING_ISIN_TO_ADD = 2


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    session = get_session()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
    db_user = session.query(User).get(user.id)
    if not db_user:
        # –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º
        new_user = User(tg_id=user.id, full_name=user.full_name)
        session.add(new_user)
        session.commit()
        context.bot_data.get("logger", print)(f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} ({user.id})")

    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–Ø BondWatch ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–ª–µ–¥–∏—Ç –∑–∞ –∫—É–ø–æ–Ω–∞–º–∏ –∏ –ø–æ–≥–∞—à–µ–Ω–∏—è–º–∏ —Ç–≤–æ–∏—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π.\n\n"
        "üìé –û—Ç–ø—Ä–∞–≤—å ISIN, —á—Ç–æ–±—ã —è –¥–æ–±–∞–≤–∏–ª –±—É–º–∞–≥—É –∏ –ø—Ä–∏—Å–ª–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫—É–ø–æ–Ω–∞—Ö –∏ –ø–æ–≥–∞—à–µ–Ω–∏–∏.\n"
        "–¢—ã –º–æ–∂–µ—à—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–æ 3 –±—É–º–∞–≥.\n\n"
        "üîî –ù–∞—á–Ω—ë–º!"
    )


async def list_tracked_bonds(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = get_session()
    user = session.query(User) \
        .options(selectinload(User.tracked_bonds)) \
        .filter_by(tg_id=update.effective_user.id) \
        .first()

    if not user or not user.tracked_bonds:
        await update.message.reply_text("‚ùóÔ∏è–¢—ã –ø–æ–∫–∞ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—à—å –Ω–∏ –æ–¥–Ω–æ–π –æ–±–ª–∏–≥–∞—Ü–∏–∏.")
        session.close()
        return

    text = "üìã –í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –±—É–º–∞–≥:\n\n"
    logging.info(f"Found user {user.id} with {len(user.tracked_bonds)} tracked bonds.")
    for bond in user.tracked_bonds:
        logging.info(f"Processing bond: {bond.isin}, Name: {bond.name}")
        added = bond.added_at.strftime("%Y-%m-%d")

        display_name = bond.name
        if not display_name:
            moex_name = await get_bond_name_from_moex(bond.isin)
            if moex_name:
                display_name = moex_name
                bond.name = moex_name
                session.commit()  # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –≤ –±–∞–∑–µ
                logging.info(f"Bond name updated to: {display_name}")

        if not display_name:
            display_name = bond.isin

        text += f"‚Ä¢ {display_name} ({bond.isin}, –¥–æ–±–∞–≤–ª–µ–Ω–∞ {added})\n"

    session.close()
    await update.message.reply_text(text)


async def process_add_isin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text.strip().upper()

    if not ISIN_PATTERN.match(text):
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ ISIN. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return AWAITING_ISIN_TO_ADD

    session = get_session()
    user_id = user.id

    count = session.query(TrackedBond).filter_by(user_id=user_id).count()
    if count >= 3:
        await update.message.reply_text("‚ùå –¢—ã —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—à—å 3 –±—É–º–∞–≥–∏. –£–¥–∞–ª–∏ –æ–¥–Ω—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é.")
        return ConversationHandler.END

    exists = session.query(TrackedBond).filter_by(user_id=user_id, isin=text).first()
    if exists:
        await update.message.reply_text("‚úÖ –¢—ã —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—à—å —ç—Ç—É –±—É–º–∞–≥—É.")
        return ConversationHandler.END

    # –î–æ–±–∞–≤–ª—è–µ–º —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å MOEX (–µ—Å–ª–∏ –ø–æ–ª—É—á–∏—Ç—Å—è)
    moex_name = await get_bond_name_from_moex(text)
    bond = TrackedBond(user_id=user_id, isin=text, name=moex_name)
    session.add(bond)
    session.commit()

    # –ü—Ä–æ–±—É–µ–º –æ–±–æ–≥–∞—Ç–∏—Ç—å FIGI –∏ classCode —á–µ—Ä–µ–∑ Tinkoff
    try:
        await get_figi_by_ticker_and_classcode(text)
    except Exception as e:
        context.bot_data.get("logger", print)(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å FIGI –¥–ª—è {text}: {e}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∏–º—è –ø–æ—Å–ª–µ Tinkoff-–∑–∞–ø—Ä–æ—Å–∞
    bond = session.query(TrackedBond).filter_by(user_id=user_id, isin=text).first()
    if not bond.name and moex_name:
        bond.name = moex_name
        session.commit()

    await update.message.reply_text(f"üìå –ë—É–º–∞–≥–∞ {text} –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    return ConversationHandler.END


async def add_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ûï –í–≤–µ–¥–∏ ISIN –±—É–º–∞–≥–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å:")
    return AWAITING_ISIN_TO_ADD


async def remove_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üóë –í–≤–µ–¥–∏ ISIN –±—É–º–∞–≥–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:")
    return AWAITING_ISIN_TO_REMOVE


async def process_remove_isin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = get_session()
    isin = update.message.text.strip().upper()
    user = session.query(User).filter_by(tg_id=update.effective_user.id).first()

    if not user:
        await update.message.reply_text("–¢—ã –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start.")
        return ConversationHandler.END

    subscription = session.query(TrackedBond).filter_by(user_id=user.tg_id, isin=isin).first()

    if not subscription:
        await update.message.reply_text(f"‚ùå –¢—ã –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—à—å –±—É–º–∞–≥—É —Å ISIN {isin}.")
    else:
        session.delete(subscription)
        session.commit()
        await update.message.reply_text(f"‚úÖ –ë—É–º–∞–≥–∞ {isin} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")

    return ConversationHandler.END


async def remove_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üóë –í–≤–µ–¥–∏ ISIN –±—É–º–∞–≥–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:")
    return AWAITING_ISIN_TO_REMOVE


def register_handlers(app: Application):
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("list", list_tracked_bonds))

    # /remove –¥–∏–∞–ª–æ–≥
    remove_conv = ConversationHandler(
        entry_points=[CommandHandler("remove", remove_command)],
        states={
            AWAITING_ISIN_TO_REMOVE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_remove_isin)],
        },
        fallbacks=[],
    )
    app.add_handler(remove_conv)

    # /add –¥–∏–∞–ª–æ–≥
    add_conv = ConversationHandler(
        entry_points=[CommandHandler("add", add_command)],
        states={
            AWAITING_ISIN_TO_ADD: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_add_isin)],
        },
        fallbacks=[],
    )
    app.add_handler(add_conv)
