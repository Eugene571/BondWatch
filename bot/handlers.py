# bot.handlers.py
from telegram import Update
from telegram.ext import CommandHandler, Application, ContextTypes, filters, MessageHandler, ConversationHandler
from bot.DB import get_session, User
import re
from bot.DB import TrackedBond
from database.bond_update import get_next_coupon
from database.events import fetch_bond_events
from database.figi_lookup import get_figi_by_ticker_and_classcode
from sqlalchemy.orm import selectinload
from database.moex_name_lookup import get_bond_name_from_moex
from database.bond_utils import update_bond_coupon_info
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler
from datetime import datetime

import logging
import io
import sys

sys.stdout = io.TextIOWrapper(sys.stdout.detach(), encoding='utf-8')
sys.stderr = io.TextIOWrapper(sys.stderr.detach(), encoding='utf-8')

ISIN_PATTERN = re.compile(r'^[A-Z]{2}[A-Z0-9]{10}$')  # –ü—Ä–∏–º–µ—Ä: RU000A105TJ2
AWAITING_ISIN_TO_REMOVE = 1
AWAITING_ISIN_TO_ADD = 2


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    session = get_session()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
    db_user = session.query(User).filter_by(tg_id=user.id).first()
    if not db_user:
        # –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º
        new_user = User(tg_id=user.id, full_name=user.full_name)
        session.add(new_user)
        session.commit()
        context.bot_data.get("logger", print)(f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} ({user.id})")

    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–Ø BondWatch ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–ª–µ–¥–∏—Ç –∑–∞ –∫—É–ø–æ–Ω–∞–º–∏ –∏ –ø–æ–≥–∞—à–µ–Ω–∏—è–º–∏ —Ç–≤–æ–∏—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π.\n\n"
        "üìé –û—Ç–ø—Ä–∞–≤—å ISIN, —á—Ç–æ–±—ã —è –¥–æ–±–∞–≤–∏–ª –±—É–º–∞–≥—É –∏ –ø—Ä–∏—Å–ª–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫—É–ø–æ–Ω–∞—Ö –∏ –ø–æ–≥–∞—à–µ–Ω–∏–∏.\n"
        "–¢—ã –º–æ–∂–µ—à—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–æ 3 –±—É–º–∞–≥.\n\n"
        "üîî –ù–∞—á–Ω—ë–º!"
    )


async def list_tracked_bonds(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = get_session()
    user = session.query(User) \
        .options(selectinload(User.tracked_bonds)) \
        .filter_by(tg_id=update.effective_user.id) \
        .first()

    if not user or not user.tracked_bonds:
        await update.message.reply_text("‚ùóÔ∏è–¢—ã –ø–æ–∫–∞ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—à—å –Ω–∏ –æ–¥–Ω–æ–π –æ–±–ª–∏–≥–∞—Ü–∏–∏.")
        session.close()
        return

    text = "üìã –í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –±—É–º–∞–≥:\n\n"
    logging.info(f"Found user {user.id} with {len(user.tracked_bonds)} tracked bonds.")
    for bond in user.tracked_bonds:
        logging.info(f"Processing bond: {bond.isin}, Name: {bond.name}")
        added = bond.added_at.strftime("%Y-%m-%d")

        display_name = bond.name
        if not display_name:
            moex_name = await get_bond_name_from_moex(bond.isin)
            if moex_name:
                display_name = moex_name
                bond.name = moex_name
                session.commit()
                logging.info(f"Bond name updated to: {display_name}")

        if not display_name:
            display_name = bond.isin

        # —á–∏—Ç–∞–µ–º –∫—É–ø–æ–Ω –∏–∑ –º–æ–¥–µ–ª–∏
        next_coupon_text = ""
        if bond.next_coupon_date and bond.next_coupon_value:
            next_coupon_text = (
                f"\nüëâ –°–ª–µ–¥—É—é—â–∏–π –∫—É–ø–æ–Ω: {bond.next_coupon_date} –Ω–∞ —Å—É–º–º—É {bond.next_coupon_value} —Ä—É–±."
            )

        text += f"‚Ä¢ {display_name} ({bond.isin}, –¥–æ–±–∞–≤–ª–µ–Ω–∞ {added})\n"

    session.close()
    await update.message.reply_text(text)


async def process_add_isin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text.strip().upper()

    if not ISIN_PATTERN.match(text):
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ ISIN. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return AWAITING_ISIN_TO_ADD

    session = get_session()
    user_id = user.id

    count = session.query(TrackedBond).filter_by(user_id=user_id).count()
    if count >= 3:
        await update.message.reply_text("‚ùå –¢—ã —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—à—å 3 –±—É–º–∞–≥–∏. –£–¥–∞–ª–∏ –æ–¥–Ω—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é.")
        return ConversationHandler.END

    exists = session.query(TrackedBond).filter_by(user_id=user_id, isin=text).first()
    if exists:
        await update.message.reply_text("‚úÖ –¢—ã —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—à—å —ç—Ç—É –±—É–º–∞–≥—É.")
        return ConversationHandler.END

    moex_name = await get_bond_name_from_moex(text)
    bond = TrackedBond(user_id=user_id, isin=text, name=moex_name)
    session.add(bond)
    session.commit()

    try:
        await get_figi_by_ticker_and_classcode(text)
    except Exception as e:
        context.bot_data.get("logger", print)(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å FIGI –¥–ª—è {text}: {e}")

    bond = session.query(TrackedBond).filter_by(user_id=user_id, isin=text).first()

    if not bond.name and moex_name:
        bond.name = moex_name
        session.commit()

    logger = context.bot_data.get("logger", print)

    # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ get_next_coupon
    coupon_set = False
    try:
        next_coupon = await get_next_coupon(bond.isin, bond.figi, bond, session)
        if next_coupon:
            bond.next_coupon_date = next_coupon['date']
            bond.next_coupon_value = next_coupon['value']
            session.commit()
            coupon_set = True
    except Exception as e:
        logger(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∫—É–ø–æ–Ω –¥–ª—è {text}: {e}")

    # –ï—Å–ª–∏ –∫—É–ø–æ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî –≤—ã–∑—ã–≤–∞–µ–º fallback
    if not coupon_set:
        await update_bond_coupon_info(bond, session, logger)

    await update.message.reply_text(f"üìå –ë—É–º–∞–≥–∞ {text} –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    return ConversationHandler.END


async def add_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ûï –í–≤–µ–¥–∏ ISIN –±—É–º–∞–≥–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å:")
    return AWAITING_ISIN_TO_ADD


async def remove_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üóë –í–≤–µ–¥–∏ ISIN –±—É–º–∞–≥–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:")
    return AWAITING_ISIN_TO_REMOVE


async def process_remove_isin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = get_session()
    isin = update.message.text.strip().upper()
    user = session.query(User).filter_by(tg_id=update.effective_user.id).first()

    if not user:
        await update.message.reply_text("–¢—ã –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start.")
        return ConversationHandler.END

    subscription = session.query(TrackedBond).filter_by(user_id=user.tg_id, isin=isin).first()

    if not subscription:
        await update.message.reply_text(f"‚ùå –¢—ã –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—à—å –±—É–º–∞–≥—É —Å ISIN {isin}.")
    else:
        session.delete(subscription)
        session.commit()
        await update.message.reply_text(f"‚úÖ –ë—É–º–∞–≥–∞ {isin} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")

    return ConversationHandler.END


async def show_events(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = get_session()
    user = session.query(User) \
        .options(selectinload(User.tracked_bonds)) \
        .filter_by(tg_id=update.effective_user.id) \
        .first()

    if not user or not user.tracked_bonds:
        await update.message.reply_text("‚ùóÔ∏è –¢—ã –ø–æ–∫–∞ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—à—å –Ω–∏ –æ–¥–Ω–æ–π –æ–±–ª–∏–≥–∞—Ü–∏–∏.")
        session.close()
        return

    text = "üìä –ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è –ø–æ —Ç–≤–æ–∏–º –æ–±–ª–∏–≥–∞—Ü–∏—è–º:\n\n"
    for bond in user.tracked_bonds:
        next_event = None
        if bond.next_coupon_date:
            next_event = f"{bond.next_coupon_date} ‚Äî –≤—ã–ø–ª–∞—Ç–∞ –∫—É–ø–æ–Ω–∞ {bond.next_coupon_value:.2f} —Ä—É–±."

        if next_event:
            text += f"‚Ä¢ {bond.name or bond.isin}:\n  üè∑Ô∏è {next_event}\n"
        else:
            text += f"‚Ä¢ {bond.name or bond.isin}:\n  ‚ú® –ù–µ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π\n"

    session.close()
    await update.message.reply_text(text)


async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = get_session()
    user = session.query(User) \
        .options(selectinload(User.tracked_bonds)) \
        .filter_by(tg_id=update.effective_user.id) \
        .first()

    if not user or not user.tracked_bonds:
        await update.message.reply_text("‚ùóÔ∏è –¢—ã –ø–æ–∫–∞ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—à—å –Ω–∏ –æ–¥–Ω–æ–π –æ–±–ª–∏–≥–∞—Ü–∏–∏.")
        session.close()
        return

    keyboard_buttons = [[InlineKeyboardButton(bond.name or bond.isin, callback_data=bond.isin)] for bond in
                        user.tracked_bonds]
    reply_markup = InlineKeyboardMarkup(keyboard_buttons)

    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∏–≥–∞—Ü–∏—é:", reply_markup=reply_markup)
    session.close()


async def bond_info_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    isin = query.data
    events = await fetch_bond_events(isin)

    reply_text = f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ–±–ª–∏–≥–∞—Ü–∏–∏ {isin}:\n\n"

    current_date = datetime.now().date()  # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞

    # –ö—É–ø–æ–Ω—ã
    if events.get("coupons"):
        # –ë–ª–∏–∂–∞–π—à–∏–π –∫—É–ø–æ–Ω
        nearest_coupon = min((event for event in events["coupons"] if event.get('coupondate')),
                             key=lambda x: x.get('coupondate'),
                             default=None)
        if nearest_coupon:
            reply_text += "üìù –ö—É–ø–æ–Ω:\n"
            reply_text += f"- –î–∞—Ç–∞: {nearest_coupon.get('coupondate')}; –†–∞–∑–º–µ—Ä –∫—É–ø–æ–Ω–∞: {nearest_coupon.get('value')} —Ä—É–±.\n"

    # –ê–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–∏
    if events.get("amortizations"):
        # –°–∞–º–∞—è –±–ª–∏–∑–∫–∞—è –±—É–¥—É—â–∞—è –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è
        nearest_amortization = min((event for event in events["amortizations"]
                                    if datetime.strptime(event.get('amortdate'), '%d.%m.%Y').date() > current_date),
                                  key=lambda x: datetime.strptime(x.get('amortdate'), '%d.%m.%Y').date(),
                                  default=None)
        if nearest_amortization:
            reply_text += "\nüìù –ê–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è:\n"
            reply_text += f"- –î–∞—Ç–∞: {nearest_amortization.get('amortdate')}; –°—É–º–º–∞ –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–∏: {nearest_amortization.get('value')} —Ä—É–±.\n"
        else:
            reply_text += "\nüìå –ê–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ—à–ª–∞.\n"

    # –û—Ñ–µ—Ä—Ç—ã (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ñ–µ—Ä—Ç)
    if events.get("offers") and events["offers"]:
        reply_text += "\nüìù –û—Ñ–µ—Ä—Ç—ã:\n"
        for event in events["offers"]:
            offer_date = event.get('offerdate')
            price = event.get('price')
            if price is not None:
                reply_text += f"- –î–∞—Ç–∞: {offer_date}; –¶–µ–Ω–∞ –æ—Ñ–µ—Ä—Ç—ã: {price} —Ä—É–±.\n"
    else:
        reply_text += "\nüìå –û—Ñ–µ—Ä—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.\n"

    # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
    if not any([events.get("coupons"), events.get("amortizations"), events.get("offers")]):
        reply_text += "\n–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —ç—Ç–æ–π –æ–±–ª–∏–≥–∞—Ü–∏–∏."

    await query.edit_message_text(reply_text)


def register_handlers(app: Application):
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("list", list_tracked_bonds))
    app.add_handler(CommandHandler("events", show_events))
    app.add_handler(CallbackQueryHandler(bond_info_callback))  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    app.add_handler(CommandHandler("info", info_command))

    # /remove –¥–∏–∞–ª–æ–≥
    remove_conv = ConversationHandler(
        entry_points=[CommandHandler("remove", remove_command)],
        states={
            AWAITING_ISIN_TO_REMOVE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_remove_isin)],
        },
        fallbacks=[],
    )
    app.add_handler(remove_conv)

    # /add –¥–∏–∞–ª–æ–≥
    add_conv = ConversationHandler(
        entry_points=[CommandHandler("add", add_command)],
        states={
            AWAITING_ISIN_TO_ADD: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_add_isin)],
        },
        fallbacks=[],
    )
    app.add_handler(add_conv)
